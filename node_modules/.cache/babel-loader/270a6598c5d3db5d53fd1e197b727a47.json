{"ast":null,"code":"var _jsxFileName = \"/home/apurva/react-typescript-practice/quiz-app/src/components/QuizCard.tsx\";\nimport { Wrapper, ButtonWrapper } from \"./Quizcard.styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuizCard = _ref => {\n  let {\n    question,\n    answers,\n    userAnswer,\n    totalQuestion,\n    questionNumber,\n    callback\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"number\",\n      children: [\"Question: \", questionNumber, \" / \", totalQuestion]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      dangerouslySetInnerHTML: {\n        __html: question\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers\",\n      children: answers.map((answer, index) => /*#__PURE__*/_jsxDEV(ButtonWrapper, {\n        clicked: (userAnswer === null || userAnswer === void 0 ? void 0 : userAnswer.correct_answer) === answer,\n        userClicked: (userAnswer === null || userAnswer === void 0 ? void 0 : userAnswer.answer) === answer,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !!userAnswer,\n          value: answer,\n          onClick: callback,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            dangerouslySetInnerHTML: {\n              __html: answer\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_c = QuizCard;\nexport default QuizCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizCard\");","map":{"version":3,"sources":["/home/apurva/react-typescript-practice/quiz-app/src/components/QuizCard.tsx"],"names":["Wrapper","ButtonWrapper","QuizCard","question","answers","userAnswer","totalQuestion","questionNumber","callback","__html","map","answer","index","correct_answer"],"mappings":";AACA,SAASA,OAAT,EAAkBC,aAAlB,QAAuC,mBAAvC;;;AAUA,MAAMC,QAAqC,GAAG,QAOxC;AAAA,MAPyC;AAC7CC,IAAAA,QAD6C;AAE7CC,IAAAA,OAF6C;AAG7CC,IAAAA,UAH6C;AAI7CC,IAAAA,aAJ6C;AAK7CC,IAAAA,cAL6C;AAM7CC,IAAAA;AAN6C,GAOzC;AAEJ,sBACE,QAAC,OAAD;AAAA,4BACE;AAAG,MAAA,SAAS,EAAC,QAAb;AAAA,+BACaD,cADb,SACgCD,aADhC;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAG,MAAA,uBAAuB,EAAE;AAAEG,QAAAA,MAAM,EAAEN;AAAV;AAA5B;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBACGC,OAAO,CAACM,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,kBACX,QAAC,aAAD;AACA,QAAA,OAAO,EAAK,CAAAP,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEQ,cAAZ,MAA+BF,MAD3C;AAEA,QAAA,WAAW,EAAK,CAAAN,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEM,MAAZ,MAAuBA,MAFvC;AAAA,+BAIE;AAAQ,UAAA,QAAQ,EAAE,CAAC,CAACN,UAApB;AAAgC,UAAA,KAAK,EAAEM,MAAvC;AAA+C,UAAA,OAAO,EAAEH,QAAxD;AAAA,iCACE;AAAM,YAAA,uBAAuB,EAAE;AAAEC,cAAAA,MAAM,EAAEE;AAAV;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAJF,SAGKC,KAHL;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CA7BD;;KAAMV,Q;AA+BN,eAAeA,QAAf","sourcesContent":["import { UserAnswer } from \"../propTypes\";\nimport { Wrapper, ButtonWrapper } from \"./Quizcard.styles\";\ntype QuestionCardProps = {\n  question: string;\n  answers: string[];\n  userAnswer: UserAnswer | undefined;\n  totalQuestion: number;\n  questionNumber: number;\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n};\n\nconst QuizCard: React.FC<QuestionCardProps> = ({\n  question,\n  answers,\n  userAnswer,\n  totalQuestion,\n  questionNumber,\n  callback,\n}) => {\n\n  return (\n    <Wrapper>\n      <p className=\"number\">\n        Question: {questionNumber} / {totalQuestion}\n      </p>\n      <p dangerouslySetInnerHTML={{ __html: question }}></p>\n      <div className=\"answers\">\n        {answers.map((answer, index: number) => (\n          <ButtonWrapper \n          clicked = { userAnswer?.correct_answer === answer}\n          userClicked = { userAnswer?.answer === answer}\n          key={index}>\n            <button disabled={!!userAnswer} value={answer} onClick={callback}>\n              <span dangerouslySetInnerHTML={{ __html: answer }} />\n            </button>\n          </ButtonWrapper>\n        ))}\n      </div>\n    </Wrapper>\n  );\n};\n\nexport default QuizCard;\n"]},"metadata":{},"sourceType":"module"}