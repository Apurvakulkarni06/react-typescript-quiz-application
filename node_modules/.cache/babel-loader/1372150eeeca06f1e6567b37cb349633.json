{"ast":null,"code":"var _jsxFileName = \"/home/apurva/react-typescript-practice/quiz-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport QuizCard from \"./components/QuizCard\";\nimport { fetchQuestions } from \"./API\";\nimport { Difficulty } from \"./propTypes\";\nimport { GlobalStyles, Wrapper } from \"./App.styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TOTAL_QUESTIONS = 10;\nvar state;\n\n(function (state) {\n  state[\"INIT\"] = \"initial\";\n  state[\"LOADING\"] = \"loading\";\n  state[\"SUCCESS\"] = \"success\";\n  state[\"ERROR\"] = \"error\";\n})(state || (state = {}));\n\nfunction App() {\n  _s();\n\n  const [appState, setAppState] = useState(state.INIT);\n  const [questions, setQuestions] = useState([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameover] = useState(true);\n\n  const startTrivia = async () => {\n    setAppState(state.LOADING);\n    setGameover(false);\n\n    try {\n      const quizQuestions = await fetchQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n      setQuestions(quizQuestions);\n      setAppState(state.SUCCESS);\n    } catch {\n      setAppState(state.ERROR);\n    }\n  };\n\n  const checkAnswer = e => {\n    // get user's answer\n    const selectedAnswer = e.currentTarget.value; // check selected  anwers is correct\n\n    const isCorrectAnswer = questions[number].correct_answer === selectedAnswer; // add score if answer is correct\n\n    if (isCorrectAnswer) setScore(prev => prev + 1); // save user answer in an array\n\n    const userSelectedAnswer = {\n      question: questions[number].question,\n      answer: selectedAnswer,\n      correct: isCorrectAnswer,\n      correct_answer: questions[number].correct_answer\n    };\n    setUserAnswers(prev => [...prev, userSelectedAnswer]);\n  };\n\n  const nextQuestion = () => {\n    if (number === TOTAL_QUESTIONS - 1) {\n      setGameover(true);\n    } else {\n      setNumber(prev => prev + 1);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyles, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [appState === state.ERROR && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Opps something went wrong..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"REACT QUIZ APP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), gameOver && userAnswers.length > 0 && /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"score-board\",\n        children: [\"Your total score is \", score, \" / \", TOTAL_QUESTIONS, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), gameOver || userAnswers.length === TOTAL_QUESTIONS ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start-button\",\n        onClick: startTrivia,\n        children: \"Start Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this) : null, !gameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"score\",\n        children: [\"Score:\", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 23\n      }, this), appState === state.LOADING && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loader\",\n        children: \"Loading Questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), appState === state.SUCCESS && !gameOver && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(QuizCard, {\n          questionNumber: number + 1,\n          question: questions[number].question,\n          answers: questions[number].answers,\n          totalQuestion: TOTAL_QUESTIONS,\n          userAnswer: userAnswers ? userAnswers[number] : undefined,\n          callback: checkAnswer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: nextQuestion,\n          children: \"Next Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }, this) : null]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"qkuAwItQtCnoBtBocCmH3/iUfRs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/apurva/react-typescript-practice/quiz-app/src/App.tsx"],"names":["React","useState","QuizCard","fetchQuestions","Difficulty","GlobalStyles","Wrapper","TOTAL_QUESTIONS","state","App","appState","setAppState","INIT","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameover","startTrivia","LOADING","quizQuestions","EASY","SUCCESS","ERROR","checkAnswer","e","selectedAnswer","currentTarget","value","isCorrectAnswer","correct_answer","prev","userSelectedAnswer","question","answer","correct","nextQuestion","length","answers","undefined"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport QuizCard from \"./components/QuizCard\";\n\nimport { fetchQuestions } from \"./API\";\nimport { QuestionState, Difficulty, UserAnswer } from \"./propTypes\";\n\nimport { GlobalStyles, Wrapper } from \"./App.styles\"\n\nconst TOTAL_QUESTIONS = 10;\n\n\nconst enum state {\n  INIT = \"initial\",\n  LOADING = \"loading\",\n  SUCCESS = \"success\",\n  ERROR = \"error\",\n}\n\nfunction App() {\n  const [appState, setAppState] = useState(state.INIT);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<UserAnswer[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameover] = useState(true);\n\n  const startTrivia = async () => {\n    setAppState(state.LOADING);\n    setGameover(false);\n    try {\n      const quizQuestions = await fetchQuestions(\n        TOTAL_QUESTIONS,\n        Difficulty.EASY\n      );\n      setQuestions(quizQuestions);\n      setAppState(state.SUCCESS);\n    } catch {\n      setAppState(state.ERROR);\n    }\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    // get user's answer\n    const selectedAnswer = e.currentTarget.value;\n   \n    // check selected  anwers is correct\n    const isCorrectAnswer = questions[number].correct_answer === selectedAnswer;\n    \n    // add score if answer is correct\n    if(isCorrectAnswer) setScore(prev=> prev + 1);\n    \n    // save user answer in an array\n    const userSelectedAnswer = {\n      question: questions[number].question,\n      answer: selectedAnswer,\n      correct: isCorrectAnswer,\n      correct_answer: questions[number].correct_answer\n    }\n\n    setUserAnswers(prev=>[...prev, userSelectedAnswer])\n  };\n\n  const nextQuestion = () => {\n    if (number === (TOTAL_QUESTIONS - 1)) {\n      setGameover(true);\n    }\n    else{\n      setNumber(prev=> prev + 1);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyles />\n      <Wrapper>\n        {appState === state.ERROR && <p> Opps something went wrong..</p>}\n        \n        <h1>REACT QUIZ APP</h1>\n\n        {\n          gameOver && userAnswers.length > 0  && \n          <h2 className=\"score-board\">Your total score is {score} / {TOTAL_QUESTIONS} </h2>\n        }\n        \n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start-button\" onClick={startTrivia}>\n            Start Quiz\n          </button>\n        ) : null}\n        \n        {!gameOver && <p className=\"score\">Score:{score}</p>}\n        {appState === state.LOADING && (\n          <p className=\"loader\">Loading Questions...</p>\n        )}\n\n        {appState === state.SUCCESS && !gameOver && (\n          <>\n            <QuizCard\n              questionNumber={number + 1}\n              question={questions[number].question}\n              answers={questions[number].answers}\n              totalQuestion={TOTAL_QUESTIONS}\n              userAnswer={userAnswers ? userAnswers[number] : undefined}\n              callback={checkAnswer}\n            />\n            {\n              userAnswers.length === number + 1\n              && number !== TOTAL_QUESTIONS\n              ?\n              <button onClick={nextQuestion}>Next Question</button>\n              :\n              null\n              \n            }\n          </>\n        )}\n      </Wrapper>\n    </>\n    \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}