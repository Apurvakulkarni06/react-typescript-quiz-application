{"ast":null,"code":"var _jsxFileName = \"/home/apurva/react-typescript-practice/quiz-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport QuizCard from \"./components/QuizCard\";\nimport { fetchQuestions, Difficulty } from \"./API\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TOTAL_QUESTIONS = 10;\nvar state;\n\n(function (state) {\n  state[\"INIT\"] = \"initial\";\n  state[\"LOADING\"] = \"loading\";\n  state[\"SUCCESS\"] = \"success\";\n  state[\"ERROR\"] = \"error\";\n})(state || (state = {}));\n\nfunction App() {\n  _s();\n\n  const [appState, setAppState] = useState(state.INIT);\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameover] = useState(true);\n\n  const startTrivia = async () => {\n    setAppState(state.LOADING);\n    setGameover(false);\n\n    try {\n      const quizQuestions = await fetchQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n      console.log(\"transformaed output:\", quizQuestions);\n      setAppState(state.SUCCESS);\n      setQuestions(quizQuestions);\n    } catch {\n      setAppState(state.ERROR);\n    }\n  };\n\n  const checkAnswer = e => {};\n\n  const nextQuestion = () => {\n    if (number === TOTAL_QUESTIONS - 1) {\n      setGameover(true);\n    }\n\n    setNumber(number + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [appState === state.ERROR && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Opps something went wrong..\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 36\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"REACT QUIZ APP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start-button\",\n      onClick: startTrivia,\n      children: \"Start Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"score\",\n      children: [\"Score:\", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), appState === state.LOADING && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loader\",\n      children: \"Loading Questions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 39\n    }, this), appState === state.SUCCESS && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(QuizCard, {\n        questionNumber: number + 1,\n        question: questions[number].question,\n        answers: answers[number].answers,\n        totalQuestion: TOTAL_QUESTIONS,\n        userAnswer: userAnswers ? userAnswers[number] : undefined,\n        callback: checkAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextQuestion,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"uJo1sR+Q0Tk4/4Z2mKVeJeQBC5g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/apurva/react-typescript-practice/quiz-app/src/App.tsx"],"names":["React","useState","QuizCard","fetchQuestions","Difficulty","TOTAL_QUESTIONS","state","App","appState","setAppState","INIT","questions","setQuestions","answers","setAnswers","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameover","startTrivia","LOADING","quizQuestions","EASY","console","log","SUCCESS","ERROR","checkAnswer","e","nextQuestion","question","undefined"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport QuizCard from \"./components/QuizCard\";\n\nimport { QuestionState, fetchQuestions, Difficulty } from \"./API\";\n\nconst TOTAL_QUESTIONS = 10;\n\ntype Answer = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correct_answer: string;\n};\nconst enum state {\n  INIT = \"initial\",\n  LOADING = \"loading\",\n  SUCCESS = \"success\",\n  ERROR = \"error\",\n}\n\nfunction App() {\n  const [appState, setAppState] = useState(state.INIT);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [answers, setAnswers] = useState([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<Answer[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameover] = useState(true);\n\n  const startTrivia = async () => {\n    setAppState(state.LOADING);\n    setGameover(false);\n    try {\n      const quizQuestions = await fetchQuestions(\n        TOTAL_QUESTIONS,\n        Difficulty.EASY\n      );\n      console.log(\"transformaed output:\", quizQuestions);\n      setAppState(state.SUCCESS);\n      setQuestions(quizQuestions);\n    } catch {\n      setAppState(state.ERROR);\n    }\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {};\n\n  const nextQuestion = () => {\n    \n    if(number === (TOTAL_QUESTIONS - 1)){\n      setGameover(true)\n    }\n    setNumber( number + 1);\n  };\n\n  return (\n    <div className=\"App\">\n      {appState === state.ERROR && <p> Opps something went wrong..</p>}\n      <h1>REACT QUIZ APP</h1>\n      <button className=\"start-button\" onClick={startTrivia}>\n        Start Quiz\n      </button>\n      <p className=\"score\">Score:{score}</p>\n      {appState === state.LOADING &&  <p className=\"loader\">Loading Questions...</p>}\n     \n      {appState === state.SUCCESS && (\n        <>\n          <QuizCard\n            questionNumber={number + 1}\n            question={questions[number].question}\n            answers={answers[number].answers}\n            totalQuestion={TOTAL_QUESTIONS}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n          <button onClick={nextQuestion}>Next Question</button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}